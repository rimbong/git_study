git 
파일 버전관리 프로그램
repository 파일 버전을 보관해둔다.
---------------------------------------------------------------------------
repository 만들기
방법 2가지
1.작업하던 폴더를 init > git 레파지토리 생성 > 연결(remote add)
2.git 레파지토리 생성 > clone > clone 받은 폴더 안에서 작업

1번 방법
git bash 실행
cd /c 
cd 작업폴더경로
git init

이후 github 홈페이지에서 repository를 만든후 주소 복사
git bash로 돌아와서
git remote add origin 복사주소 : 원격 저장소완 연결
git remote -v : 원격저장소 연결 확인

이후로는 소스트리를 이용한다.

2번 방법은 github 홈페이지에서 repository를 만든후 소스트리로 pull하여 작업하면된다.
---------------------------------------------------------------------------
git 설치 후 등록
$ git config --global user.name "Your Name"
$ git config --global user.email you@example.com
$ git config --global -e   // 에디터로 수정
$ git config --global core.editor "code"  // 에디터 수정시 vscode 로 수정
$ git config --global core.autocrlf true  // 줄바꿈 문자열을 정해줌 window에 경우 해당함
$ git config --global core.autocrlf input // 위와 같으며 mac에 해당함
$ git config --global alias.st status	  // alias 설정 status => st
$ git config --list						// config 설정 정보 보기
---------------------------------------------------------------------------
vscode 를 켠후 작업 디렉토리를 포함시킨 상태에서 터미널을 연다. 이후
git int	=> git 으로 부터 감시를 받는다. repository를 생성해준다.
---------------------------------------------------------------------------
파일 현재상태를 기록해둔다. ( 버전 관리 )
git add 파일명 => git commit -m '메모'
이렇게 두번의 과정을 나눈 이유
 - 기록이 필요 없는 파일들이 있기 떄문 (이미지 파일)
---------------------------------------------------------------------------
				add						   	   commit
작업폴더		<=>			staging area		<=>			local repository(로컬 저장소)
untracked
tracked(unmodified
		,modified)
---------------------------------------------------------------------------
여러 파일을 staging 하는 경우
git add .
주의) git add 이후 해당 파일을 수정이후 커밋 할 경우 
수정시점의 버전이 커밋되는 것이 아니라 add한 시점의 버전이 커밋이 된다. 즉 staged 상태가 아닌것이다.
따라서 수정이후에는 다시 git add를 해줘야 한다.
---------------------------------------------------------------------------
$ git commit -m "메세지"$ git commit -a$ git commit -am "메세지"
-m : vim에서 별도의 메세지를 작성할 필요없이 인라인 형식으로 바로 커밋 메세지 작성.-a : 별도의 add명령어를 사용하지 않고 수정된 파일에 대해 add, commit을 한번에 수행함. (단, 한번도 add되지 않은 파일은 add를 따로 작업 해줘야함.)-am : a, m의 옵션을 합친 형태.
---------------------------------------------------------------------------
상태창 열기
git status
---------------------------------------------------------------------------
commit 내역
git log --all --oneline 
git log --oneline --graph
---------------------------------------------------------------------------
현재 파일과 최근 commit 기록과 비교하기
git diff	=>	j/k 스크콜바 조작 / q 종료
---------------------------------------------------------------------------
새로운 기능 추가
원문의 복사본을 만들어 복사본에 작업후 합치는 원리라고 생각하면된다.
	1. branch 만들어주기
	git branch 브랜치명
	
	2. branch 간 이동 ( master 또한 master branch 이다.)
	git switch 브랜치명
	
	3. branch 합쳐주기
	중심 branch(master,main)로 이동후 git merge 합치려는브랜치명
	
	4. conflict
	충돌(conflict)은 수동으로 코드를 고친후 git add -> git commit
---------------------------------------------------------------------------
다양한 merge 방법
	1. 3-way merge ( 일반적인 방법 )
	 각 브랜치에 신규 commit이 있는 경우 
	2. fast-forward (문제가 안된다면 자동으로 된다.)
	 main(master)에 따로 commit이 없는 경우 즉, 기준 브랜치에 신규 commit이 없는 경우 
	 만들어논 브랜치를 main(master)로 설정한다.
	
	브랜치가 merge가 되도 브랜치가 자동으로 삭제 되지 않는다. 따라서 따로 삭제해줘야한다.
	merge 완료된 브랜치 삭제는 git branch -d 브랜치명
	merge 안한	 브랜치 삭제는 git branch -D 브랜치명
	
	*) 3-way-merge를 너무 남발하면 굉장히 더러워 진다. 따라서 나온 3,4번 방법

	3. 시작점을 옮겨서 merge
	 git rebase , fast-forward 방식과 유사하지만 차이는 시작점을 옮기는것이다.
	 각 컷미이 아래와 같을떄	(1번에서 branch를 만든다고 생각하자)
	 branch	a => b => c 
	 main 	1 => 2
	 여기서 a 지점을 2로 바꿔준후 fast-forward 하는것과 같다.
	 branch	 	 a => b => c 
	 main 	1 => 2
	 단점으로는 conflict가 많이 날 수 있다.
	 3-way merge 방식과 다르게 먼저 새로운 브랜치로 이동 후 명령어 : git rebase 중심브랜치명(main,master)  하면 된다.

	4.squash and merge
	branch	a => b => c 	
	main 	1 => 2
	이와 같이 있을 떄 이를	
	main 	1 => 2 => c*  (선이 이어지는것 이나리 순간이동 느낌이다.)
	와 같이 만들어주는 방식이다.
	명령어 : git merge --squash 새브랜치
---------------------------------------------------------------------------
코드를 복구 시키기
git revert,reset,restore
---------------------------------------------------------------------------
최근 커밋한 시점으로 파일을 되돌린다.
	git resotre 파일명 
특정 commit 시점으로 파일 복구하는 법
	git restore --source 커밋아이디 복구할파일명
staging 취소
	git resotre --staged 파일명
---------------------------------------------------------------------------
commit 취소하는법 => 커밋을 삭제하거나 조작 할 수는 없다.
	git revert 커밋아이디 또는 여러개를 취소할 경우 git revert 커밋아이디1 커밋아이디2 
	해당 커밋아이디의 반대 행위를 커밋한다
최근 commit 취소
	git revert HEAD
---------------------------------------------------------------------------
과거로 모든걸 되돌리기 (협업시엔 사용금지 굉장히 위험)
	git reset --hard 커밋아이디
---------------------------------------------------------------------------
원격 저장소로 올리기
	git을 온라인 repository ( 원격 저장소 )에 저장한다.
	먼저 git의 주 브랜치 명을 main으로 바꿔준다.
	git branch -M main
	git push -u 원격저장소주소 브랜치명(main)   / -u는 원격 저장소 주소를 기억하라는 의미로 이후에는 git push 하면 된다.
	git remote add 변수명 주소  / 변수 추가하기 	
---------------------------------------------------------------------------
원격 저장소에서 내려받기 (타인과 협업)	
	git clone 주소
원격 저장소에 변동사항이 있는 경우 ( 타인이 push를 이력이 있음 )
	git pull 주소 브랜치명  ( git fetch + git merge , fetch : 원격 저장소에 있는 commit 중 신규 commit을 가져온다. , merge : 내 브랜치에 merge 한다.)
	git pull을 했을때 원격저장소와 로컬 저장소의 차이로 인해 안될때가 있음 이때는 문제가 없다면 git pull origin master --allow-unrelated-histories 이와같이 한다.	
---------------------------------------------------------------------------
브랜치로 협업하기
	로컬 저장소에서 브랜치를 만든후 push 한다.
	이후 github 온라인에서 pull request를 한다. 이떄 merger 과정에서 conflict가 나는 부분이 있다면 하나하나 고쳐줘야한다.
---------------------------------------------------------------------------










	